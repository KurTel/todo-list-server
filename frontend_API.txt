// ==================== –ö–û–ù–°–¢–ê–ù–¢–´ ====================
const BASE_URL = 'http://localhost:3000';

// ==================== –†–ê–ë–û–¢–ê –°–û –°–ü–ò–°–ö–ê–ú–ò (LISTS) ====================

// 1. –ü–û–õ–£–ß–ò–¢–¨ –í–°–ï –°–ü–ò–°–ö–ò (GET)
function getAllLists() {
    fetch(`${BASE_URL}/lists`, {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json',
        }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤');
        }
        return response.json();
    })
    .then(lists => {
        console.log('–í—Å–µ —Å–ø–∏—Å–∫–∏:', lists);
        return lists;
    })
    .catch(error => {
        console.error('–û—à–∏–±–∫–∞:', error);
    });
}

// 2. –°–û–ó–î–ê–¢–¨ –ù–û–í–´–ô –°–ü–ò–°–û–ö (POST)
function createList(listName) {
    fetch(`${BASE_URL}/lists`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            name: listName
        })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞');
        }
        return response.json();
    })
    .then(newList => {
        console.log('–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫:', newList);
        return newList;
    })
    .catch(error => {
        console.error('–û—à–∏–±–∫–∞:', error);
    });
}

// 3. –û–ë–ù–û–í–ò–¢–¨ –°–ü–ò–°–û–ö (PUT)
function updateList(listId, newName) {
    fetch(`${BASE_URL}/lists/${listId}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            name: newName
        })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞');
        }
        return response.json();
    })
    .then(updatedList => {
        console.log('–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫:', updatedList);
        return updatedList;
    })
    .catch(error => {
        console.error('–û—à–∏–±–∫–∞:', error);
    });
}

// 3. –ü–û–õ–£–ß–ò–¢–¨ –°–ü–ò–°–û–ö (GET)
function updateList(listId) {
    fetch(`${BASE_URL}/lists/${listId}`, {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json',
        },
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞');
        }
        return response.json();
    })
    .then(list => {
        console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫:', list);
        return list;
    })
    .catch(error => {
        console.error('–û—à–∏–±–∫–∞:', error);
    });
}

// 4. –£–î–ê–õ–ò–¢–¨ –°–ü–ò–°–û–ö (DELETE)
function deleteList(listId) {
    fetch(`${BASE_URL}/lists/${listId}`, {
        method: 'DELETE',
        headers: {
            'Content-Type': 'application/json',
        }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞');
        }
        return response.json();
    })
    .then(result => {
        console.log('–°–ø–∏—Å–æ–∫ —É–¥–∞–ª–µ–Ω:', result);
        return result;
    })
    .catch(error => {
        console.error('–û—à–∏–±–∫–∞:', error);
    });
}

// ==================== –†–ê–ë–û–¢–ê –° –ó–ê–î–ê–ß–ê–ú–ò (TODOS) ====================

// 5. –î–û–ë–ê–í–ò–¢–¨ –ó–ê–î–ê–ß–£ –í –°–ü–ò–°–û–ö (POST)
function addTodo(listId, text, completed = false) {
    fetch(`${BASE_URL}/lists/${listId}/todos`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            text: text,
            completed: completed
        })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏');
        }
        return response.json();
    })
    .then(newTodo => {
        console.log('–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞:', newTodo);
        return newTodo;
    })
    .catch(error => {
        console.error('–û—à–∏–±–∫–∞:', error);
    });
}

// 6. –û–ë–ù–û–í–ò–¢–¨ –ó–ê–î–ê–ß–£ (PUT) (updates - –æ–±—ä–µ–∫—Ç todo —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏)
function updateTodo(listId, todoId, updates) {
    fetch(`${BASE_URL}/lists/${listId}/todos/${todoId}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(updates)
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏');
        }
        return response.json();
    })
    .then(updatedTodo => {
        console.log('–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞:', updatedTodo);
        return updatedTodo;
    })
    .catch(error => {
        console.error('–û—à–∏–±–∫–∞:', error);
    });
}

// 7. –£–î–ê–õ–ò–¢–¨ –ó–ê–î–ê–ß–£ (DELETE)
function deleteTodo(listId, todoId) {
    fetch(`${BASE_URL}/lists/${listId}/todos/${todoId}`, {
        method: 'DELETE',
        headers: {
            'Content-Type': 'application/json',
        }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏');
        }
        return response.json();
    })
    .then(result => {
        console.log('–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞:', result);
        return result;
    })
    .catch(error => {
        console.error('–û—à–∏–±–∫–∞:', error);
    });
}


// ==================== –°–ü–†–ê–í–û–ß–ù–ò–ö API ====================
/*
üìã –°–ü–†–ê–í–û–ß–ù–ò–ö –î–õ–Ø –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–ê:

BASE URL: http://localhost:3000

üìù –†–ê–ë–û–¢–ê –°–û –°–ü–ò–°–ö–ê–ú–ò:
- GET    /lists           - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–ø–∏—Å–∫–∏
- POST   /lists           - —Å–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ (body: {name: "–Ω–∞–∑–≤–∞–Ω–∏–µ"})
- PUT    /lists/:id       - –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ (body: {name: "–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"})
- DELETE /lists/:id       - —É–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫

‚úÖ –†–ê–ë–û–¢–ê –° –ó–ê–î–ê–ß–ê–ú–ò:
- POST   /lists/:listId/todos       - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É (body: {text: "—Ç–µ–∫—Å—Ç", completed: false})
- PUT    /lists/:listId/todos/:todoId - –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É (body: {text: "—Ç–µ–∫—Å—Ç", completed: true})
- DELETE /lists/:listId/todos/:todoId - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É

üîÑ –ö–ê–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨:
1. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ —Å –ø–æ–º–æ—â—å—é createList()
2. –ü–æ–ª—É—á–∏—Ç–µ ID —Å–ø–∏—Å–∫–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç ID –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏ –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ
4. –î–ª—è –∑–∞–¥–∞—á —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∞–π—Ç–µ ID –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞

üí° –ü–†–ò–ú–ï–ß–ê–ù–ò–ï:
–í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –¥–æ–∂–∏–¥–∞—Ç—å—Å—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
–ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Å–ª–µ–¥—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π!
*/